package it.objectmethod.Biblioteca.param;

import it.objectmethod.Biblioteca.entity.Libro;
import it.objectmethod.Biblioteca.entity.Libro_;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.springframework.data.jpa.domain.Specification;

import java.time.Year;

@Data
@NoArgsConstructor
public class LibroParams {
    private Long libroId;
    private String titolo;
    private String autore;
    private String isbn;
    private String genere;
    private String editore;
    private Year annoPubblicazione;

    public Specification<Libro> toSpecification() {
        return Specification.<Libro>where(null)
                .and(equalIdSpecification(libroId))
                .and(equalTitoloSpecification(titolo))
                .and(equalAutoreSpecification(autore))
                .and(equalIsbnSpecification(isbn))
                .and(equalGenereSpecification(genere))
                .and(equalEditoreSpecification(editore))
                .and(equalAnnoPubblicazioneSpecification(annoPubblicazione));
    }

    public Specification<Libro> equalIdSpecification(final Long libroId) {
        if (libroId == null) {
            return null;
        }
        return (root, query, criteriaBuilder) -> criteriaBuilder.equal(root.get(Libro_.LIBRO_ID), libroId);
    }

    public Specification<Libro> equalTitoloSpecification(final String titolo) {
        if (titolo == null) {
            return null;
        }
        return (root, query, criteriaBuilder) -> criteriaBuilder.equal(root.get(Libro_.TITOLO), titolo);

    }

    public Specification<Libro> equalAutoreSpecification(final String autore) {
        if (autore == null) {
            return null;
        }
        return (root, query, criteriaBuilder) -> criteriaBuilder.equal(root.get(Libro_.AUTORE), autore);

    }

    public Specification<Libro> equalIsbnSpecification(final String isbn) {
        if (isbn == null) {
            return null;
        }
        return (root, query, criteriaBuilder) -> criteriaBuilder.equal(root.get(Libro_.ISBN), isbn);

    }

    public Specification<Libro> equalGenereSpecification(final String genere) {
        if (genere == null) {
            return null;
        }
        return (root, query, criteriaBuilder) -> criteriaBuilder.equal(root.get(Libro_.GENERE), genere);

    }

    public Specification<Libro> equalEditoreSpecification(final String editore) {
        if (editore == null) {
            return null;
        }
        return (root, query, criteriaBuilder) -> criteriaBuilder.equal(root.get(Libro_.EDITORE), editore);

    }

    public Specification<Libro> equalAnnoPubblicazioneSpecification(final Year annoPubblicazione) {
        if (annoPubblicazione == null) {
            return null;
        }
        return (root, query, criteriaBuilder) -> criteriaBuilder.equal(root.get(Libro_.ANNO_PUBBLICAZIONE), annoPubblicazione);

    }
}
